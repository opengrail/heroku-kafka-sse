<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1479311164610">{:repl-history {:ide [], :local [&quot;(heroku-kafka-&gt;sse-ch-2)&quot; &quot;(heroku-kafka-&gt;sse-ch-2 \&quot;simple-proxy-topic\&quot; 0 \&quot;.*\&quot;)  &quot; &quot;(def cfg (KafkaConfig.))&quot; &quot;(def cfg (com.heroku.kafka.demo.KafkaConfig.))&quot; &quot;(.getProperties cfg)&quot; &quot;(def broker-cfg (.getProperties cfg))&quot; &quot;(sse/sse-consumer \&quot;simple-proxy-topic\&quot; -1 )&quot; &quot;(def consumer (sse/sse-consumer \&quot;simple-proxy-topic\&quot;))&quot; &quot;(def consumer (sse/sse-consumer \&quot;simple-proxy-topic\&quot; -1))&quot; &quot;(sse/sse-consumer \&quot;simple-proxy-topic\&quot; 0)&quot; &quot;(def consumer (sse/sse-consumer \&quot;simple-proxy-topic\&quot; 0))&quot; &quot;(.poll consumer 200)&quot; &quot;(.poll consumer 2000)&quot; &quot;(.poll consumer 8000)&quot; &quot;(def recs (.poll consumer 8000))&quot; &quot;recs&quot; &quot;(+ 1 2)&quot; &quot;(doseq [[n v] marshalling-config] (println n v))&quot; &quot;(def marshalling-config {\&quot;key.serializer\&quot;   (str StringSerializer)\n                         \&quot;value.serializer\&quot; (str StringSerializer)})\n&quot; &quot;(doseq [[n v] marshalling-config] (.setProperty brokers n v))&quot; &quot;(def foo (doseq [[n v] marshalling-config] (.setProperty brokers n v)))&quot; &quot;(merge brokers marshalling-config)&quot; &quot;(str StringSerializer)&quot; &quot;(println StringSerializer)&quot; &quot;(StringSerializer)&quot; &quot;(.class StringSerializer)&quot; &quot;(.toString StringSerializer)&quot; &quot;(.asSubclass StringSerializer)&quot; &quot;(class StringSerializer)&quot; &quot;(Class/getCanonicalName StringSerializer)&quot; &quot;(.getCanonicalName StringSerializer)&quot; &quot;(type brokers)&quot; &quot;(heroku-kafka/kafka-connection-config)&quot; &quot;(merge marshalling-config brokers)&quot; &quot;(def ^:private marshalling-config {\&quot;key.serializer\&quot;   StringSerializer\n                                   \&quot;value.serializer\&quot; StringSerializer})&quot; &quot;(def ^:private marshalling-config {\&quot;key.serializer\&quot;   StringSerializer\n                                   \&quot;value.serializer\&quot; StringSerializer})\n&quot; &quot;(def marshalling-config {\&quot;key.serializer\&quot;   StringSerializer\n                         \&quot;value.serializer\&quot; StringSerializer})\n&quot; &quot;(kafka-connection-config marshalling-config)&quot; &quot;(def foo (kafka-connection-config))&quot; &quot;foo&quot; &quot;(merge foo marshalling-config)&quot; &quot;(type foo)&quot; &quot;(type marshalling-config)&quot; &quot;(as-properties marshalling-config )&quot; &quot;(doseq [[n v] marshalling-config] (println \&quot;N\&quot; n \&quot;V\&quot; v))&quot; &quot;(doseq [[n v] foo] (println \&quot;N\&quot; n \&quot;V\&quot; v))&quot; &quot;(http/start-server handler {:port port})&quot; &quot;(.stop server)&quot; &quot;(http/start-server handler {:port 5000})&quot; &quot;(def server (-main))&quot; &quot;marshalling-config&quot; &quot;brokers&quot; &quot;(def producer (KafkaProducer. (merge marshalling-config heroku-brokers)))&quot; &quot;(def brokers (heroku-kafka/kafka-connection-config))&quot; &quot;(def producer (KafkaProducer. (merge marshalling-config brokers)))&quot; &quot;(kafka-produce producer \&quot;simple-proxy-topic\&quot; \&quot;rando-event\&quot; (str \&quot;{\\\&quot;id\\\&quot; \&quot; 3542 \&quot; \\\&quot;message\\\&quot; \\\&quot;Hello SSE\\\&quot;}\&quot;))&quot; &quot;TOPIC&quot; &quot;(heroku/heroku-kafka-&gt;sse-ch TOPIC CONSUME_LATEST \&quot;.*\&quot;)&quot; &quot;(kafka-connection-config)&quot; &quot;()&quot; &quot;(env-or-fail :kafka-url)&quot; &quot;(def config (kafka-connection-config))&quot; &quot;config&quot; &quot;(sse/sse-consumer \&quot;simple-proxy-topic\&quot; -1 config)&quot; &quot;(heroku-kafka-&gt;sse-ch \&quot;simple-proxy-topic\&quot; 0 \&quot;.*\&quot;)&quot; &quot;(heroku-kafka-&gt;sse-ch-2 \&quot;simple-proxy-topic\&quot; 0 \&quot;.*\&quot;)&quot; &quot;(heroku-kafka-&gt;sse-ch-2 \&quot;simple-proxy-topic\&quot; -1)&quot; &quot;(heroku-kafka-test \&quot;simple-proxy-topic\&quot; 0)&quot; &quot;(heroku-kafka-test \&quot;simple-proxy-topic\&quot; -1)&quot; &quot;(defn -main [&amp; [port]]\n  (let [port (Integer. (or port (env :port) 5000))\n        server (http/start-server handler {:port port})]\n    (netty/wait-for-close server)))&quot; &quot;x&quot; &quot;(swap! x (set! true))&quot; &quot;@x&quot; &quot;(def x (atom true))&quot; &quot;(reset! x false)&quot; &quot;(System/getProperty \&quot;foo\&quot;)&quot; &quot;(or (System/getProperty \&quot;foo\&quot;) \&quot;\&quot;)&quot; &quot;(heroku-kafka-&gt;stdout \&quot;simple-proxy-topic\&quot; -1)&quot; &quot;(-main)&quot;], :remote []}}</component>
</project>